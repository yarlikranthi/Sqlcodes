
 -- write a program to input date and print day of the week

Declare
 @d Date;
SET @d = '1947-08-15'
print datename(dw,@d)

DB programs interact with T-SQL :
---------------------------------

   -> From TSQL program to perform operations over db execute sql command TSQL programs

   - the following commands can be executed from tsql program

            I. DML ( Insert, update, delete, merge)

           II. DRL ( Select )

          III. TCL ( Commit, rollback, save )

In T-SQL SELECT statement syntax :
----------------------------------

  Select @var1 = col1, 
         @var2 = col2,
         .............
  From <table_name>
  WHERE <condition>

Example:
--------

  Select @a = ename,
         @b = sal
  from Emp 
  where Empno=7788

-- write a tsql program to input employee  no and print corresponding employee ename and salary

Declare @v_eno int, @v_ename varchar(10), @v_sal money
 set @v_eno=7902
 select @v_ename=ename, @v_sal=sal from Emp where Empno=@v_eno  
 print 'Employee Name =   ' + @v_ename
 print 'Employee Salary = ' + cast( @v_sal as varchar)

-- write a tsql program to input employee no and display experience.

 Declare
 @v_eno int, @v_doj date, @experience int
 set @v_eno = 7839
 select @v_doj = hiredate from emp where empno=@v_eno
 set @experience = datediff(yy, @v_doj,Getdate())
 print 'Experience = ' + cast( @experience as varchar )

Control Structures :
--------------------

  -> Controls structures are used to control flow of the programs

i. Conditional Control Structures :
-----------------------------------

  -> T-sql supports 3 types of conditional control structures

a. if-then-else

b. multi if

c. nested if

a. if-then-else :
-----------------

   -> this control structure contains bother TRUE and FALSE Blocks

syntax:
-------

if <condition> 
  begin
   statements                -- true block
  end
else
  begin
   statements                -- false block
  end


-- t-sql for to find given no. is even or odd

declare @num int
set @num=100
if @num%2 = 0 
 begin
  print 'Even'
 end
else
 begin
  print 'Odd'
 end


-- write a prog to input empno and incrment employ salary by sepecific amount and after increment if 
   employe salary exeeeds 5000 then cancel that increment

Declare
 @v_eno int, @amt money, @sal money
 set @v_eno = 7788
 set @amt = 500
 Begin Transaction
 Update emp set sal = sal + @amt where empno = @v_eno
 select @sal = sal from emp where empno = @v_eno
 if @sal>5000  
   begin
    rollback
	print 'Transaction is Rollbacked.'
   end
 else
   begin
    commit
	print 'Transaction completed successfully.'
   end

output :
---------

(1 row affected)
Transaction completed successfully.


-- write a t-sql program to input student no and calculate total, avg and result and insert into result table

Table creations :
-----------------

Create table std_db( sno tinyint, sname varchar(10), s1 decimal(6,2),s2 decimal(6,2), s3 decimal(6,2) )

Insert into std_db values(1,'anand',90,80,70),(2,'raj',30, 90, 80)

select * from std_db

Create Table std_result( sno tinyint, total decimal(7,2), avge decimal(7,2), result varchar(15) )\


program :
---------

Declare @v_sno tinyint, @v_s1 decimal(6,2), @v_s2 decimal(6,2), @v_s3 decimal(6,2), @v_tot decimal(7,2),
        @v_avge decimal(7,2), @v_result varchar(15)
Set @v_Sno=1
select @v_s1=s1, @v_s2=s2, @v_s3=s3 from std_db where sno = @v_Sno
set @v_tot = @v_s1 + @v_s2 + @v_s3
set @v_avge = @v_tot/3.0
if @v_s1 >=35 and @v_s2>=35 and @v_s3>=35 
begin
   set @v_result = 'Pass'
   print 'pass'
 end
else
   set @v_result = 'Failed'
Insert into std_result values( @v_sno, @v_tot, @v_avge, @v_result)


output :
--------

select * from std_result;

1	240.00	80.00	Pass
2	200.00	66.67	Failed

note: In IF statment TRUE/FLASE blocks if any morethan one statment required then BEGIN..END is mandatory


b. Multi if :
-------------

  -> by using MULTI-IF we can check mutliple conditions continuosly

syntax:
-------

if cond1
 begin
  statments
 end
else if cond2
 begin
  statements
 end 
else if cond3
 begin
  statements
 end

.
.
else
 begin
  statements
 end

Example:
--------

  -- write a program to input employ no and increment sal based on following conditions

             if job=CLERK sal by 10%
               
                    SALESMAN sal by 15%

		    MANAGER  sal by 20%

                    OTHERS   sal by 5%

Declare
 @v_eno int, @v_job varchar(10), @pct  int
 set @v_eno=7876
 select @v_job=job from emp where empno=@v_eno
 IF @v_job='CLERK' 
    Set @pct=10
 ELSE IF @v_job='SALESMAN' 
    Set @pct=15
 ELSE IF @v_job='MANAGER' 
    Set @pct=20
 ELSE
    Set @pct=5
Update emp set sal= sal + (sal* @pct/100) where empno = @v_eno
print 'Employ Salaries Incrmented by ' + cast( @pct as varchar) + '%' 

output :
--------

(1 row affected)
Employ Salaries Incrmented by 10%

c. NESTED IF :
--------------

  -> IF wihtin IF is called as Nested if

syntax:
-------

if cond
 begin
  if cond
   begin
    statments
   end
  else
   begin
    statements
   end
 end
else
 begin
  statements
 end

-- write a program to process bacnk transactions(W/D)

Table Creation
--------------

Create table bank_mas( accno varchar(10), cname varchar(15), Bal money)

Insert into bank_mas values( 'sbi1', 'kiran', 4000 ), ('sbi2', 'pavan', 1500 )




-- write a tsql program to input employee no and display corresponding employee netslary

               netsalary = sal + comm

-- write a t-sql program to input voter date of birth and display he/she eligible for vote or not





















